<class>
<keyword> class </keyword>
<identifier 1 static > Ball </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier 1 field > x </identifier>
<symbol> , </symbol>
<identifier 1 field > y </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier 1 field > lengthx </identifier>
<symbol> , </symbol>
<identifier 1 field > lengthy </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier 1 field > d </identifier>
<symbol> , </symbol>
<identifier 1 field > straightD </identifier>
<symbol> , </symbol>
<identifier 1 field > diagonalD </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier 1 field > invert </identifier>
<symbol> , </symbol>
<identifier 1 field > positivex </identifier>
<symbol> , </symbol>
<identifier 1 field > positivey </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier 1 field > leftWall </identifier>
<symbol> , </symbol>
<identifier 1 field > rightWall </identifier>
<symbol> , </symbol>
<identifier 1 field > topWall </identifier>
<symbol> , </symbol>
<identifier 1 field > bottomWall </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier 1 field > wall </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier 1 static > Ball </identifier>
<identifier 1 static > new </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier 1 arg > Ax </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier 1 arg > Ay </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier 1 arg > AleftWall </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier 1 arg > ArightWall </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier 1 arg > AtopWall </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier 1 arg > AbottomWall </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > x </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > Ax </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > y </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > Ay </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > leftWall </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > AleftWall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > rightWall </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > ArightWall </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 6 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > topWall </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > AtopWall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > bottomWall </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > AbottomWall </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 6 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > wall </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier 1 static > show </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier 1 static > dispose </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier 1 static > Memory </identifier>
<symbol> . </symbol>
<identifier 1 static > deAlloc </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier 1 static > show </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier 1 static > Screen </identifier>
<symbol> . </symbol>
<identifier 1 static > setColor </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier 1 static > draw </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier 1 static > hide </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier 1 static > Screen </identifier>
<symbol> . </symbol>
<identifier 1 static > setColor </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier 1 static > draw </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier 1 static > draw </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier 1 static > Screen </identifier>
<symbol> . </symbol>
<identifier 1 static > drawRectangle </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier 0 var > x </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier 0 var > y </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier 0 var > x </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier 0 var > y </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier 1 static > getLeft </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier 0 var > x </identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier 1 static > getRight </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier 0 var > x </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier 1 static > setDestination </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier 1 arg > destx </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier 1 arg > desty </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier 1 var > dx </identifier>
<symbol> , </symbol>
<identifier 1 var > dy </identifier>
<symbol> , </symbol>
<identifier 1 var > temp </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > lengthx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > destx </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier 0 var > x </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > lengthy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > desty </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier 0 var > y </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > dx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 1 static > Math </identifier>
<symbol> . </symbol>
<identifier 1 static > abs </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier 0 var > lengthx </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > dy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 1 static > Math </identifier>
<symbol> . </symbol>
<identifier 1 static > abs </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier 0 var > lengthy </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > invert </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > dx </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier 0 var > dy </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > invert </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > temp </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > dx </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > dx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > dy </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > dy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > temp </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > positivex </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > y </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier 0 var > desty </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > positivey </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > x </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier 0 var > destx </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > positivex </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > x </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier 0 var > destx </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > positivey </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > y </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier 0 var > desty </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > d </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<identifier 0 var > dy </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<identifier 0 var > dx </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > straightD </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<identifier 0 var > dy </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > diagonalD </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > dy </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier 0 var > dx </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier 1 static > move </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier 1 static > hide </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > d </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > d </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > d </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier 0 var > straightD </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > d </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > d </identifier>
</term>
<symbol> + </symbol>
<term>
<identifier 0 var > diagonalD </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > positivey </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > invert </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > x </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > x </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > y </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > y </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > invert </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > x </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > x </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > y </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > y </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > positivex </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > invert </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > y </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > y </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > x </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > x </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > invert </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > y </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > y </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > x </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > x </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > x </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier 0 var > leftWall </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > wall </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > x </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > leftWall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > x </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier 0 var > rightWall </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > wall </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > x </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > rightWall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > y </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier 0 var > topWall </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > wall </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > y </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > topWall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > y </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier 0 var > bottomWall </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > wall </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > y </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > bottomWall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier 1 static > show </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier 0 var > wall </identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier 1 static > bounce </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier 1 arg > bouncingDirection </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier 1 var > newx </identifier>
<symbol> , </symbol>
<identifier 1 var > newy </identifier>
<symbol> , </symbol>
<identifier 1 var > divLengthx </identifier>
<symbol> , </symbol>
<identifier 1 var > divLengthy </identifier>
<symbol> , </symbol>
<identifier 1 var > factor </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > divLengthx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > lengthx </identifier>
</term>
<symbol> / </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > divLengthy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > lengthy </identifier>
</term>
<symbol> / </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > bouncingDirection </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > factor </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > lengthx </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > bouncingDirection </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> | </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > lengthx </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > bouncingDirection </identifier>
</term>
<symbol> = </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > factor </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 20 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > factor </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > wall </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > newx </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 506 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > newy </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > divLengthy </identifier>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 50 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier 0 var > divLengthx </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > newy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > y </identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > newy </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier 0 var > factor </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > wall </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > newx </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > newy </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > divLengthy </identifier>
</term>
<symbol> * </symbol>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier 0 var > divLengthx </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > newy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > y </identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > newy </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier 0 var > factor </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > wall </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > newy </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 250 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > newx </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > divLengthx </identifier>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 25 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier 0 var > divLengthy </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > newx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > x </identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > newx </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier 0 var > factor </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > newy </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > newx </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > divLengthx </identifier>
</term>
<symbol> * </symbol>
<term>
<integerConstant> 25 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier 0 var > divLengthy </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier 0 var > newx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier 0 var > x </identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier 0 var > newx </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier 0 var > factor </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier 1 static > setDestination </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier 0 var > newx </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier 0 var > newy </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
